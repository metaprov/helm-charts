apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: modeld-control-plane
    app.kubernetes.io/part-of: modeld
  name: modeld-control-plane
  namespace: modeld-system
spec:
  replicas: {{ .Values.controlplane.replicas }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: modeld-control-plane
  template:
    metadata:
      labels:
        app.kubernetes.io/name: modeld-control-plane
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9091'
    spec:
      serviceAccountName: modeld-control-plane
      containers:
        - name: main
          image: "{{ .Values.modeld.registry }}/metaprov/modeld-control-plane:{{ .Values.modeld.tag }}"
          imagePullPolicy: {{ .Values.controlplane.image.pullPolicy }}
          volumeMounts:
            - name: data
              mountPath: /home/modeld/data
            - name: webhook-server-cert
              mountPath: /tmp/k8s-webhook-server/serving-certs
              readOnly: true
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 9091
              name: metrics
            - containerPort: 8008
              name: profiling
            - containerPort: 9443
              name: webhook-server
              protocol: TCP
          env:
            - name: DS_HOST
              value: "modeld-data-plane"
            - name: DS_PORT
              value: "8080"
            - name: CLOUDS_HOST
              value: "127.0.0.1"
            - name: CLOUDS_PORT
              value: "8090"
            - name: CACHE_PATH
              value: "/home/modeld/data"
            - name: FAKE
              value: "false"
            - name: METRIC_ADDR
              value: ":9090"
            - name: ENABLE_LEADER_ELECTION
              value: "false"
            - name: WH
              value: "true"
          resources:
            limits:
              cpu: "{{.Values.controlplane.resources.limits.cpu}}"
              memory: "{{.Values.controlplane.resources.limits.memory}}"
            requests:
              cpu: "{{.Values.controlplane.resources.requests.cpu}}"
              memory: "{{.Values.controlplane.resources.requests.memory}}"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9090
            initialDelaySeconds: 5
            periodSeconds: 10

        - name: clouds
          image: "{{ .Values.modeld.registry }}/metaprov/modeld-clouds:{{ .Values.modeld.tag }}"
          imagePullPolicy: {{ .Values.clouds.image.pullPolicy }}
          ports:
            - containerPort: 8090
              name: http            
          volumeMounts:
            - name: data
              mountPath: /home/modeld/data
          resources:
            limits:
              cpu: "{{.Values.clouds.resources.limits.cpu}}"
              memory: "{{.Values.clouds.resources.limits.memory}}"
            requests:
              cpu: "{{.Values.clouds.resources.requests.cpu}}"
              memory: "{{.Values.clouds.resources.requests.memory}}"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9090
            initialDelaySeconds: 5
            periodSeconds: 10
          env:
            - name: GRPC_TRACE
              value: "all"
            - name:  GRPC_VERBOSITY
              value: "DEBUG"
            - name:  GRPC_GO_LOG_VERBOSITY_LEVEL
              value: "99"
            - name:  GRPC_GO_LOG_SEVERITY_LEVEL
              value: "info"
            - name:   HOST
              value:  "0.0.0.0"
            - name:   PORT
              value: "8090"
            - name:   DEBUG
              value: "false"
            - name: ENV
              value: "dev"
            - name: CACHE_PATH
              value: "/home/modeld/data"


      volumes:
        - name: data
          emptyDir: {}
        - name: webhook-server-cert
          secret:
            secretName: webhook-server-cert