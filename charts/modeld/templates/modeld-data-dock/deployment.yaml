apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: modeld-data-dock
  name: modeld-data-dock
  namespace: modeld-system
spec:
  replicas: {{ .Values.datadock.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: modeld-data-dock
  template:
    metadata:
      labels:
        app.kubernetes.io/name: modeld-data-dock
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9091'
    spec:
        serviceAccountName: modeld-data-dock
        containers:
        - name: main
          image: "{{ .Values.datadock.image.registry }}/{{ .Values.datadock.image.repository }}:{{ .Values.datadock.image.tag }}"
          imagePullPolicy: {{ .Values.datadock.image.pullPolicy }}
          volumeMounts:
            - name: data
              mountPath: /var/opt/modeld/data
          resources:
            limits:
              cpu: "{{.Values.datadock.resources.limits.cpu}}"
              memory: "{{.Values.datadock.resources.limits.memory}}"
            requests:
              cpu: "{{.Values.datadock.resources.requests.cpu}}"
              memory: "{{.Values.datadock.resources.requests.memory}}"
          ports:
            - containerPort: 8095
              name: http
            - containerPort: 9091
              name: metrics
            - containerPort: 8008
              name: profiling
          livenessProbe:
              httpGet:
                path: /healthz
                port: 9090
              initialDelaySeconds: 5
              periodSeconds: 10
          env:
            - name: PORT
              value: "8095"
            - name: CACHE_PATH
              valueFrom:
                  configMapKeyRef:
                    name: controlplane-configmap
                    key: cache-path

        - name: cloud-proxy
          image: "{{ .Values.clouds.image.registry }}/{{ .Values.clouds.image.repository }}:{{ .Values.clouds.image.tag }}"
          imagePullPolicy: {{ .Values.clouds.image.pullPolicy }}
          ports:
            - containerPort: 8090
              name: http
          volumeMounts:
            - name: data
              mountPath: /var/opt/modeld/data
          resources:
            limits:
              cpu: "{{.Values.clouds.resources.limits.cpu}}"
              memory: "{{.Values.clouds.resources.limits.memory}}"
            requests:
              cpu: "{{.Values.clouds.resources.requests.cpu}}"
              memory: "{{.Values.clouds.resources.requests.memory}}"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9090
            initialDelaySeconds: 5
            periodSeconds: 10
          env:
            - name: CACHE_PATH
              valueFrom:
                  configMapKeyRef:
                    name: controlplane-configmap
                    key: cache-path

        volumes:
        - name : data
          emptyDir: {}